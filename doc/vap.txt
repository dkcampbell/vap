*vap.txt* A plugin for project configuration

Author:  Dan Campbell <https://compiledworks.com>
License: MIT

This plugin is only available when Vim is compiled with Python support.
VAP will only work with compatibility mode disabled.

INTRODUCTION                                           *VAP*

VAP, or Vim Auto Projects, is a poorly named tool for managing configurations
of C/C++ projects using the CMake build system. VAP, once configured, will
automatically enable Vim to work with out of source builds, provide code
completion information to the YouCompleteMe plugin, and launch builds of a
project asynchronously using the vim-dispatch plugin.

VAP is pronounced like "zap."

CONFIGURATION                                          *vap-config*

VAP configuration works through a JSON file which is called builds.json by
default. When Vim is started the builds.json is created if it does not already
exist. VAP will check to see if the current directory is listed as a project
directory from the configuration file. Based on the options configured in this
file VAP will modify various settings and commands.

Example default builds.json file:
{
    "source_location": {
        "debug": {
            "cc": "clang",
            "cxx": "clang++",
            "debug_run": [],
            "default": true,
            "dir_name": "folder-name",
            "extra_args": [],
            "generator": "Unix Makefiles",
            "run": [],
            "toolchain": "",
            "type": "DEBUG",
            "ycm": false
        },
        "release": {
            "cc": "clang",
            "cxx": "clang++",
            "debug_run": [],
            "default": false,
            "dir_name": "folder-name",
            "extra_args": [],
            "generator": "Unix Makefiles",
            "run": [],
            "toolchain": "",
            "type": "RELEASE",
            "ycm": false
        }
    }
}

This creates a configuration for a single project with two build
types.

"source_location" is the directory VAP will associate the settings with. For
example if instead of "source_location" you had "/home/dan/git/stl-viewer"
then anytime Vim was started from that directory VAP would use the associated
data for project management. Nested inside the "source_location" is a list of
build types. In the example above the "debug" will be the default build type
used when Vim starts because "default" is set to true. To switch targets you
can use the |vap-:Target| command.

Build Configuration ~

The following may be used in VAP to configure the behavior of a build.

"cc" - This will set the environment variable for CC, which allows you to
change the C compiler used when the |vap-:CMakeGenerate| command is used.

"cxx" - This will set the environment variable for CXX, which allows you to
change the C++ compiler used when the |vap-:CMakeGenerate| command is used.

"debug_run" - List of strings that will be used when the |vap-:Debug| command
is executed. For example you could have
"debug_run": [
    "gdb ./my-program",
    "-c core"
]

"default" - If you have multiple build types for a project the one with
"default" set to true will be used at startup. You can switch to a different
build by using the |vap-:Target| command.

"dir_name" - The location of the out of source build that will be used when
|vap-:CMakeGenerate| is used. VAP will also modify the makeprg variable used
by Vim so that the |:make| command and the Dispatch |dispatch-:Make| command
will use the proper Makefile.

"extra_args" - Extra arguments to be passed to CMake. For example I use the
following to output a file containing a clang completion database.
"extra_args": [
    "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
]

"generator" - The build generator for CMake to use. Currently only the
"Unix Makefiles" and "Ninja" generators are integrated with VAP.

"run" - List of strings that will be used when the |vap-:Run| command
is executed. For example you could have
"run": [
    "./my-program"
]

"toolchain" - This options allows you to select a toolchain file to be used by
CMake for cross-compiling.


"type" - Set the build type to be used by CMake.

"ycm" - If set to true VAP will copy a .ycm_extra_conf.py code completion file
used by the YouCompleteMe to the out of source build directory. This file is
setup to read a clang completion database located in the same folder.

COMMANDS                                               *vap-commands*

                                                       *vap-:CMakeGenerate*
:CMakeGenerate         Dispatch CMake asynchronously using the project
                       configuration settings. This will create an out of
                       source build using configuration values set in the VAP
                       configuration file.

                                                       *vap-:Edit*
:Edit                  Load the VAP configuration file into a buffer for easy
                       editing.

                                                       *vap-:Reload*
:Reload                Reload VAP configuration file without restarting Vim.

                                                       *vap-:Run*
:Run                   Dispatch the "run" command from the VAP configuration
                       file.

                                                       *vap-:Debug*
:Debug                 Dispatch the "debug_run" command from the VAP
                       configuration file.

                                                       *vap-:Target*
:Target [arguments]    Switch to a different build target defined in the VAP
                       configuration file.

CUSTOMIZING                                            *vap-customizing*

VAP only supports one variable that can be used for configuration. You can use
g:vap_config to specify the location of the VAP configuration file.

Example:
    let g:vap_config = 'path/to/builds.json'

ISSUES                                                 *vap-issues*

VAP was designed to be a solution to my daily annoyances with Vim. As a result
VAP is very much designed for my development workflow. While it may be useful
for other Vim users who work with several CMake projects it should be known
that VAP was not designed to be useful for a large userbase.

VAP has not been tested on Windows, and I doubt it will work by default.

VAP decides which build configuration to use based on the working directory
Vim is started in. This works well for my development style where I enter the
root directory of the project and type "vim ." to browse the project files in
Vim. I don't use the gVim program much, but I'm guessing this could likely
cause GUI versions of vim to not work well with this program.

VAP will not recursively match the build configuration from nested
directories. This is on purpose, so that I can have different configuration
for CMake subprojects, which I may want to use different settings for.

VAP lacks a lot of error checking for things such as determining if the dispatch
plugin is installed before using it. It was too much effort to add a solution
to a problem I don't have. You may see a lot of red if you don't have the
proper dependencies.

VAP doesn't attempt to prefix any of its commands, for example :Run instead
of :VapRun. I use this plugin daily on multiple computers, it just wasn't
worth the extra typing to try to avoid conflicts with other plugins.

 vim:tw=78:ts=8:ft=help:norl:
